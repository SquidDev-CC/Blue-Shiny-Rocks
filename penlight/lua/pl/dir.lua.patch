--- lua/pl/dir.lua
+++ lua/pl/dir.lua
@@ -107,95 +107,6 @@
     return _listfiles(dir,false)
 end
 
-local function quote_argument (f)
-    f = path.normcase(f)
-    if f:find '%s' then
-        return '"'..f..'"'
-    else
-        return f
-    end
-end
-
-
-local alien,ffi,ffi_checked,CopyFile,MoveFile,GetLastError,win32_errors,cmd_tmpfile
-
-local function execute_command(cmd,parms)
-   if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end
-   local err = path.is_windows and ' > ' or ' 2> '
-    cmd = cmd..' '..parms..err..cmd_tmpfile
-    local ret = utils.execute(cmd)
-    if not ret then
-        local err = (utils.readfile(cmd_tmpfile):gsub('\n(.*)',''))
-        remove(cmd_tmpfile)
-        return false,err
-    else
-        remove(cmd_tmpfile)
-        return true
-    end
-end
-
-local function find_ffi_copyfile ()
-    if not ffi_checked then
-        ffi_checked = true
-        local res
-        res,alien = pcall(require,'alien')
-        if not res then
-            alien = nil
-            res, ffi = pcall(require,'ffi')
-        end
-        if not res then
-            ffi = nil
-            return
-        end
-    else
-        return
-    end
-    if alien then
-        -- register the Win32 CopyFile and MoveFile functions
-        local kernel = alien.load('kernel32.dll')
-        CopyFile = kernel.CopyFileA
-        CopyFile:types{'string','string','int',ret='int',abi='stdcall'}
-        MoveFile = kernel.MoveFileA
-        MoveFile:types{'string','string',ret='int',abi='stdcall'}
-        GetLastError = kernel.GetLastError
-        GetLastError:types{ret ='int', abi='stdcall'}
-    elseif ffi then
-        ffi.cdef [[
-            int CopyFileA(const char *src, const char *dest, int iovr);
-            int MoveFileA(const char *src, const char *dest);
-            int GetLastError();
-        ]]
-        CopyFile = ffi.C.CopyFileA
-        MoveFile = ffi.C.MoveFileA
-        GetLastError = ffi.C.GetLastError
-    end
-    win32_errors = {
-        ERROR_FILE_NOT_FOUND    =         2,
-        ERROR_PATH_NOT_FOUND    =         3,
-        ERROR_ACCESS_DENIED    =          5,
-        ERROR_WRITE_PROTECT    =          19,
-        ERROR_BAD_UNIT         =          20,
-        ERROR_NOT_READY        =          21,
-        ERROR_WRITE_FAULT      =          29,
-        ERROR_READ_FAULT       =          30,
-        ERROR_SHARING_VIOLATION =         32,
-        ERROR_LOCK_VIOLATION    =         33,
-        ERROR_HANDLE_DISK_FULL  =         39,
-        ERROR_BAD_NETPATH       =         53,
-        ERROR_NETWORK_BUSY      =         54,
-        ERROR_DEV_NOT_EXIST     =         55,
-        ERROR_FILE_EXISTS       =         80,
-        ERROR_OPEN_FAILED       =         110,
-        ERROR_INVALID_NAME      =         123,
-        ERROR_BAD_PATHNAME      =         161,
-        ERROR_ALREADY_EXISTS    =         183,
-    }
-end
-
-local function two_arguments (f1,f2)
-    return quote_argument(f1)..' '..quote_argument(f2)
-end
-
 local function file_op (is_copy,src,dest,flag)
     if flag == 1 and path.exists(dest) then
         return false,"cannot overwrite destination"
@@ -200,41 +111,11 @@
     if flag == 1 and path.exists(dest) then
         return false,"cannot overwrite destination"
     end
-    if is_windows then
-        -- if we haven't tried to load Alien/LuaJIT FFI before, then do so
-        find_ffi_copyfile()
-        -- fallback if there's no Alien, just use DOS commands *shudder*
-        -- 'rename' involves a copy and then deleting the source.
-        if not CopyFile then
-            src = path.normcase(src)
-            dest = path.normcase(dest)
-            local cmd = is_copy and 'copy' or 'rename'
-            local res, err = execute_command('copy',two_arguments(src,dest))
-            if not res then return false,err end
-            if not is_copy then
-                return execute_command('del',quote_argument(src))
-            end
-            return true
-        else
-            if path.isdir(dest) then
-                dest = path.join(dest,path.basename(src))
-            end
-			local ret
-            if is_copy then ret = CopyFile(src,dest,flag)
-            else ret = MoveFile(src,dest) end
-            if ret == 0 then
-                local err = GetLastError()
-                for name,value in pairs(win32_errors) do
-                    if value == err then return false,name end
-                end
-                return false,"Error #"..err
-            else return true
-            end
-        end
-    else -- for Unix, just use cp for now
-        return execute_command(is_copy and 'cp' or 'mv',
-            two_arguments(src,dest))
-    end
+
+    local action = fs.move
+    if is_copy then action = fs.copy end
+
+    return pcall(action, src, dest)
 end
 
 --- copy a file.
